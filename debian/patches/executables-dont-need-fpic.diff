Any special options needed for linking with shared libraries can be put
in CMAKE_SHARED_LIBRARY_LINK_C_FLAGS.

See http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=478404

--- cmake-2.6.0.orig/Source/cmMakefileExecutableTargetGenerator.cxx
+++ cmake-2.6.0/Source/cmMakefileExecutableTargetGenerator.cxx
@@ -201,11 +201,6 @@
   std::string flags;
   std::string linkFlags;
 
-  // Add flags to deal with shared libraries.  Any library being
-  // linked in might be shared, so always use shared flags for an
-  // executable.
-  this->LocalGenerator->AddSharedFlags(linkFlags, linkLanguage, true);
-
   // Add flags to create an executable.
   this->LocalGenerator->
     AddConfigVariableFlags(linkFlags, "CMAKE_EXE_LINKER_FLAGS",
