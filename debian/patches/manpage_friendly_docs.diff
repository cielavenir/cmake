From: Modestas Vainius <modestas@vanius.eu>
Subject: Fix formatting of cmake module docs to be manpage (groff) friendly
 Most problems are fixed (or rather workarounded) by making long =====
 separators pre-formatted (i.e. prefixed with two spaces). In order to preserve
 visual view, the code examples themselves are prefixed with 3 spaces.
 .
 This patch fixes the following man warnings (as of cmake 2.8-rc2):
 $ cmake --help-man - | LANG=C MANWIDTH=80 man --warnings -l - > /dev/null
 <standard input>:6024: warning [p 105, 1.7i]: can't break line
 <standard input>:6027: warning [p 105, 2.7i]: cannot adjust line
 <standard input>:6027: warning [p 105, 2.8i]: can't break line
 <standard input>:7142: warning [p 117, 7.8i]: can't break line
 <standard input>:7171: warning [p 117, 11.8i]: can't break line
 <standard input>:8878: warning [p 136, 9.0i]: can't break line
 <standard input>:8887: warning [p 136, 11.5i]: cannot adjust line
 <standard input>:8887: warning [p 136, 11.7i]: can't break line
 <standard input>:8904: warning [p 136, 14.2i]: can't break line
Forwarded: yes

--- a/Modules/FindBISON.cmake
+++ b/Modules/FindBISON.cmake
@@ -22,13 +22,13 @@
 #  BISON_${Name}_OUTPUTS - The sources files generated by bison
 #  BISON_${Name}_COMPILE_FLAGS - Options used in the bison command line
 #
-#====================================================================
-# Example:
+#  ====================================================================
+#  Example:
 #
-# find_package(BISON)
-# BISON_TARGET(MyParser parser.y ${CMAKE_CURRENT_BINARY_DIR}/parser.cpp)
-# add_executable(Foo main.cpp ${BISON_MyParser_OUTPUTS})
-#====================================================================
+#   find_package(BISON)
+#   BISON_TARGET(MyParser parser.y ${CMAKE_CURRENT_BINARY_DIR}/parser.cpp)
+#   add_executable(Foo main.cpp ${BISON_MyParser_OUTPUTS})
+#  ====================================================================
 
 #=============================================================================
 # Copyright 2009 Kitware, Inc.
--- a/Modules/FindFLEX.cmake
+++ b/Modules/FindFLEX.cmake
@@ -26,23 +26,23 @@
 # where  <FlexTarget>  and <BisonTarget>  are  the  first parameters  of
 # respectively FLEX_TARGET and BISON_TARGET macros.
 #
-#====================================================================
-# Example:
+#  ====================================================================
+#  Example:
 #
-#  find_package(BISON)
-#  find_package(FLEX)
+#   find_package(BISON)
+#   find_package(FLEX)
 #
-#  BISON_TARGET(MyParser parser.y ${CMAKE_CURRENT_BINARY_DIR}/parser.cpp
-#  FLEX_TARGET(MyScanner lexer.l  ${CMAKE_CURRENT_BIANRY_DIR}/lexer.cpp)
-#  ADD_FLEX_BISON_DEPENDENCY(MyScanner MyParser)
-#
-#  include_directories(${CMAKE_CURRENT_BINARY_DIR})
-#  add_executable(Foo
-#     Foo.cc
-#     ${BISON_MyParser_OUTPUTS}
-#     ${FLEX_MyScanner_OUTPUTS}
-#  )
-#====================================================================
+#   BISON_TARGET(MyParser parser.y ${CMAKE_CURRENT_BINARY_DIR}/parser.cpp
+#   FLEX_TARGET(MyScanner lexer.l  ${CMAKE_CURRENT_BIANRY_DIR}/lexer.cpp)
+#   ADD_FLEX_BISON_DEPENDENCY(MyScanner MyParser)
+#
+#   include_directories(${CMAKE_CURRENT_BINARY_DIR})
+#   add_executable(Foo
+#      Foo.cc
+#      ${BISON_MyParser_OUTPUTS}
+#      ${FLEX_MyScanner_OUTPUTS}
+#   )
+#  ====================================================================
 
 #=============================================================================
 # Copyright 2009 Kitware, Inc.
--- a/Modules/FindProtobuf.cmake
+++ b/Modules/FindProtobuf.cmake
@@ -11,20 +11,20 @@
 #   PROTOBUF_INCLUDE_DIR - The include directory for protocol buffers
 #   PROTOBUF_PROTOC_EXECUTABLE - The protoc compiler
 #
-#====================================================================
-# Example:
+#  ====================================================================
+#  Example:
 #
-# find_package(Protobuf REQUIRED)
-# include_directories(${PROTOBUF_INCLUDE_DIRS})
+#   find_package(Protobuf REQUIRED)
+#   include_directories(${PROTOBUF_INCLUDE_DIRS})
 #
-# include_directories(${CMAKE_CURRENT_BINARY_DIR})
-# PROTOBUF_GENERATE_CPP(PROTO_SRCS PROTO_HDRS foo.proto)
-# add_executable(bar bar.cc ${PROTO_SRCS} ${PROTO_HDRS})
-# target_link_libraries(bar ${PROTOBUF_LIBRARY})
+#   include_directories(${CMAKE_CURRENT_BINARY_DIR})
+#   PROTOBUF_GENERATE_CPP(PROTO_SRCS PROTO_HDRS foo.proto)
+#   add_executable(bar bar.cc ${PROTO_SRCS} ${PROTO_HDRS})
+#   target_link_libraries(bar ${PROTOBUF_LIBRARY})
 #
 # NOTE: You may need to link against pthreads, depending
 # on the platform.
-#====================================================================
+#  ====================================================================
 #
 # PROTOBUF_GENERATE_CPP (public function)
 #   SRCS = Variable to define with autogenerated
@@ -33,7 +33,7 @@
 #          header files
 #   ARGN = proto files
 #
-#====================================================================
+#  ====================================================================
 
 
 #=============================================================================
